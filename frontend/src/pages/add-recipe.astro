---
import Layout from "../layouts/Layout.astro";
import "../styles/global.css";
---

<Layout>
  <main class="hidden login-bg">
    <div
      class="mx-[auto] mt-3 min-h-dvh w-11/12 flex flex-col items-center justify-around"
    >
      <h1 class="text-center text-xl font-bold mb-4">
        Whatâ€™s Cooking? Add Your Recipe!
      </h1>
      <form
        id="form-add-recipe"
        class="w-full flex flex-col gap-3"
        enctype="multipart/form-data"
      >
        <label for="name" class="block mb-2 text-sm font-medium text-gray-900"
          >Recipe Name:
          <input
            type="text"
            name="name"
            id="name"
            class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 mt-2"
            placeholder="Enter recipe name"
            autocomplete="off"
            required
          /></label
        >
        <div id="ingredients-container" class="flex flex-col gap-2">
          <label class="block text-sm font-medium text-gray-900"
            >Ingredients:
          </label>
          <input
            type="text"
            name="ingredients[]"
            class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5"
            placeholder="e.g. Chicken - 2 breasts"
            autocomplete="off"
            required
          />
          <button
            type="button"
            id="add-ingredient"
            class="w-full bg-gray-200 border border-gray-200 text-gray-900 text-sm rounded-lg block p-2.5"
            >Add Ingredient</button
          >
        </div>
        <div id="instructions-container" class="flex flex-col gap-2">
          <label class="block text-sm font-medium text-gray-900"
            >Instructions:
          </label>
          <input
            type="text"
            name="instructions[]"
            class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5"
            placeholder="e.g. Cut each chicken breast into two even pieces."
            autocomplete="off"
            required
          />
          <button
            type="button"
            id="add-instruction"
            class="w-full bg-gray-200 border border-gray-200 text-gray-900 text-sm rounded-lg block p-2.5"
            >Add Instruction</button
          >
        </div>
        <div class="add-recipe-middle flex w-full gap-2.5">
          <div class="drop-image w-full">
            <p class="block text-sm font-medium text-gray-900">Upload Photo:</p>
            <label
              for="dropzone-file"
              id="dropzone"
              class="mt-2 bg-center bg-contain bg-no-repeat flex flex-col items-center justify-center w-full h-40 rounded-lg cursor-pointer bg-gray-50 border border-gray-300 text-gray-900 hover:bg-gray-100"
            >
              <div
                id="dropzone-text"
                class="flex flex-col items-center justify-center pt-5 pb-6"
              >
                <svg
                  class="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 20 16"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
                  ></path>
                </svg>
                <p class="mb-2 text-sm text-gray-500 dark:text-gray-400">
                  <span class="font-semibold">Click to upload</span> or drag and
                  drop
                </p>
                <p class="text-xs text-gray-500 dark:text-gray-400">
                  SVG, PNG, JPG or GIF (MAX. 800x400px)
                </p>
              </div>
              <input
                id="dropzone-file"
                name="thumbnail"
                type="file"
                class="hidden"
              />
            </label>
          </div>
          <div class="names w-full flex flex-col">
            <label
              for="category"
              class="block mb-2 text-sm font-medium text-gray-900"
              >Category:
              <input
                type="text"
                name="category"
                id="category"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 mt-2"
                placeholder="Enter category"
                autocomplete="off"
                required
              /></label
            >
            <label
              for="area"
              class="block mb-2 text-sm font-medium text-gray-900"
              >Tags:
              <input
                type="text"
                name="area"
                id="tag"
                class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 mt-2"
                placeholder="Enter tag"
                autocomplete="off"
                required
              /></label
            >
          </div>
        </div>

        <div class="add-recipe-footer">
          <button
            type="submit"
            class="w-full text-white bg-blue-700 hover:bg-blue-800 focus:outline-non text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5"
            >Add Recipe</button
          >
          <a
            href="/recipe-home"
            class="text-center bg-gray-200 border border-gray-300 hover:bg-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 mt-2"
            >Cancel</a
          >
        </div>
      </form>
    </div>
  </main>
</Layout>

<script>
  const content = document.querySelector("main") as HTMLElement;

  const checkAuth = async () => {
    const res = await fetch(`http://localhost:4500/users/check-auth`, {
      method: "GET",
      credentials: "include",
    });
    if (!res.ok) {
      alert("You have to be logged in to do that");
      window.location.href = "/login";
      return;
    }
    content.style.display = "block";
  };

  const dropImg = document.getElementById("dropzone-file") as HTMLInputElement;
  const dropzone = document.getElementById("dropzone") as HTMLLabelElement;
  const dropzoneText = document.getElementById(
    "dropzone-text"
  ) as HTMLDivElement;
  dropImg.addEventListener("change", () => {
    if (dropImg.files && dropImg.files.length > 0) {
      const url = URL.createObjectURL(dropImg.files[0]);
      dropzone.style.backgroundImage = `url("${url}")`;
      dropzoneText.classList.add("hidden");
    }
  });

  const addIngrBtn = document.getElementById(
    "add-ingredient"
  ) as HTMLButtonElement;
  addIngrBtn.addEventListener("click", () => {
    const container = document.getElementById(
      "ingredients-container"
    ) as HTMLDivElement;
    const addButton = document.getElementById("add-ingredient");

    const newInput = document.createElement("div");
    newInput.classList.add("flex", "gap-2");
    newInput.innerHTML = `
    <input
      type="text"
      name="ingredients[]"
      class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5"
      placeholder="Enter new ingredient: "
      autocomplete="off"
      required
    />
    <button type="button" class="remove-ingredient p-2.5 border border-red-500 text-red-500 bg-white rounded-lg flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 7l-1 12a2 2 0 01-2 2H8a2 2 0 01-2-2L5 7m5 4v6m4-6v6m1-10V5a1 1 0 00-1-1h-4a1 1 0 00-1 1v2m-2 0h10" />
      </svg>
    </button>
  `;

    container.insertBefore(newInput, addButton);
  });

  const ingrContainer = document.getElementById(
    "ingredients-container"
  ) as HTMLDivElement;
  ingrContainer.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    const removeBtn = target.closest(".remove-ingredient");
    if (removeBtn) {
      removeBtn.parentElement?.remove();
    }
  });

  const addInsBtn = document.getElementById(
    "add-instruction"
  ) as HTMLButtonElement;
  addInsBtn.addEventListener("click", () => {
    const container = document.getElementById(
      "instructions-container"
    ) as HTMLDivElement;
    const addButton = document.getElementById("add-instruction");

    const newInput = document.createElement("div");
    newInput.classList.add("flex", "gap-2");
    newInput.innerHTML = `
    <input
      type="text"
      name="instructions[]"
      class="w-full bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5"
      placeholder="Enter new instruction"
      autocomplete="off"
      required
    />
    <button type="button" class="remove-instruction p-2.5 border border-red-500 text-red-500 bg-white rounded-lg flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M19 7l-1 12a2 2 0 01-2 2H8a2 2 0 01-2-2L5 7m5 4v6m4-6v6m1-10V5a1 1 0 00-1-1h-4a1 1 0 00-1 1v2m-2 0h10" />
      </svg>
    </button>
  `;

    container.insertBefore(newInput, addButton);
  });
  const instContainer = document.getElementById(
    "instructions-container"
  ) as HTMLDivElement;
  instContainer.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    const removeBtn = target.closest(".remove-instruction");
    if (removeBtn) {
      removeBtn.parentElement?.remove();
    }
  });
  const addForm = document.querySelector("#form-add-recipe") as HTMLFormElement;
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(addForm);
    const res = await fetch(`http://localhost:4500/recipes`, {
      method: "POST",
      body: formData,
    });
    if (!res.ok) {
      const data = await res.json();
      console.error(data.message);
      return;
    }
    console.log(Object.fromEntries(formData.entries()));
    window.location.href = "/recipe-table";
  });
  checkAuth()
</script>
